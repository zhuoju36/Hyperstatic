import numpy as np

from structengpy.common.csys import Cartesian
from structengpy.core.fe_model.element import Element

class Quad(Element):
    def __init__(self,name,node_i,node_j,node_k,node_l,dof):
        #Initialize local CSys,could be optimized by using a MSE plane
        o=(node_i.loc+node_j.loc+node_k.loc+node_l.loc)/4
        pt1 = (node_j.loc+node_k.loc)/2
        pt2 = (node_k.loc+node_l.loc)/2
        csys = Cartesian(o, pt1, pt2) 
        super(Quad,self).__init__(name,[node_i,node_j,node_k,node_l],2,dof,csys)
        #area is considered as the average of trangles generated by splitting the quand with diagonals
        area=0.5*np.linalg.det(np.array([[1,1,1],
                            [node_j.x-node_i.x,node_j.y-node_i.y,node_j.z-node_i.z],
                            [node_k.x-node_i.x,node_k.y-node_i.y,node_k.z-node_i.z]]))
        area+=0.5*np.linalg.det(np.array([[1,1,1],
                            [node_l.x-node_i.x,node_l.y-node_i.y,node_l.z-node_i.z],
                            [node_k.x-node_i.x,node_k.y-node_i.y,node_k.z-node_i.z]]))
        area+=0.5*np.linalg.det(np.array([[1,1,1],
                            [node_l.x-node_i.x,node_l.y-node_i.y,node_l.z-node_i.z],
                            [node_j.x-node_i.x,node_j.y-node_i.y,node_j.z-node_i.z]]))
        area+=0.5*np.linalg.det(np.array([[1,1,1],
                            [node_l.x-node_i.x,node_l.y-node_i.y,node_l.z-node_i.z],
                            [node_j.x-node_i.x,node_j.y-node_i.y,node_j.z-node_i.z]]))
        self.__area=area/4

    @property
    def area(self):
        return self.__area