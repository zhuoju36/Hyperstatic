import numpy as np

from structengpy.common.csys import Cartesian
from structengpy.core.fe_model.element import Element

class Quad(Element):
    def __init__(self,name,node_i,node_j,node_k,node_l,dof):

        #Initialize local CSys,could be optimized by using a MSE plane
        o=[(node_i.x+node_j.x+node_k.x+node_l.x)/4,
            (node_i.y+node_j.y+node_k.y+node_l.y)/4,
            (node_i.z+node_j.z+node_k.z+node_l.z)/4]
        pt1 = [ node_i.x+node_j.x, node_i.y+node_j.y, node_i.z+node_j.z ]
        pt2 = [ node_j.x+node_k.x, node_j.y+node_k.y, node_j.z+node_k.z ]
        csys = Cartesian(o, pt1, pt2) 
        super(Quad,self).__init__(2,dof,csys,name)
        self._nodes=[node_i,node_j,node_k,node_l]
        #area is considered as the average of trangles generated by splitting the quand with diagonals
        area=0.5*np.linalg.det(np.array([[1,1,1],
                            [node_j.x-node_i.x,node_j.y-node_i.y,node_j.z-node_i.z],
                            [node_k.x-node_i.x,node_k.y-node_i.y,node_k.z-node_i.z]]))
        area+=0.5*np.linalg.det(np.array([[1,1,1],
                            [node_l.x-node_i.x,node_l.y-node_i.y,node_l.z-node_i.z],
                            [node_k.x-node_i.x,node_k.y-node_i.y,node_k.z-node_i.z]]))
        area+=0.5*np.linalg.det(np.array([[1,1,1],
                            [node_l.x-node_i.x,node_l.y-node_i.y,node_l.z-node_i.z],
                            [node_j.x-node_i.x,node_j.y-node_i.y,node_j.z-node_i.z]]))
        area+=0.5*np.linalg.det(np.array([[1,1,1],
                            [node_l.x-node_i.x,node_l.y-node_i.y,node_l.z-node_i.z],
                            [node_j.x-node_i.x,node_j.y-node_i.y,node_j.z-node_i.z]]))
        self.__area=area/4
        #3D to local 2D
        V=csys.transform_matrix
        x3D=np.array([[node_i.x,node_i.y,node_i.z],
                    [node_j.x,node_j.y,node_j.z],
                    [node_k.x,node_k.y,node_k.z],
                    [node_l.x,node_l.y,node_l.z]])
        x2D=np.dot(x3D,V.T)
        self._x2D=x2D[:,:2]

    @property
    def area(self):
        return self.__area
